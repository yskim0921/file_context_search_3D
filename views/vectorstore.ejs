<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>벡터스토어 만들기</title>
    <link rel="stylesheet" href="/css/home.css">
</head>
<body>
    <div class="container">
        <!-- 사이드바 -->
        <div class="sidebar">
            <div>
                <h2>파일 관리</h2>
                <p>File Manager</p>
                <button class="btn" onclick="window.location.href='/file_manager'">📁 파일 관리</button>
                <button class="btn" onclick="window.location.href='/file_upload'">📄 파일업로드</button>
                <button class="btn" onclick="window.location.href='/folder_upload'">📁 폴더 업로드</button>
                <button class="btn" onclick="window.location.href='/vectorstore'">🔍 벡터스토어 만들기</button>
                <button class="btn" onclick="window.location.href='/file_search'">📚 문서내용 검색</button>
            </div>
            <div>
                <button class="btn" onclick="window.location.href='/'">← 홈으로</button>
            </div>
        </div>

        <!-- 메인 -->
        <div class="main">
            <div class="summary">
                <h2>🔍 벡터스토어 만들기</h2>
                
                <!-- 벡터스토어 생성 섹션 -->
                <div class="summary-box">
                    <h3>DB에 저장된 내용 벡터스토어 생성:</h3>
                    <button id="createVectorStoreBtn" class="btn" style="margin-top: 15px;">벡터 스토어 생성</button>
                    <div id="resultMessage" style="margin-top: 15px;"></div>
                </div>

                <!-- 벡터스토어 검색 섹션 -->
                <div class="summary-box">
                    <h3>벡터스토어에서 검색:</h3>
                    <div style="display: flex; gap: 10px; margin-top: 15px; margin-bottom: 15px;">
                        <input type="text" id="searchInput" placeholder="검색하고 싶은 내용을 입력하세요..." class="search-input">
                        <button id="searchBtn" class="btn" style="padding: 14px 32px; font-size: 16px; font-weight: 600;">🔍 검색</button>
                    </div>
                    <div id="searchResults" style="margin-top: 15px;">
                        <p style="text-align: center; color: #666;">검색 결과가 여기에 표시됩니다.</p>
                    </div>
                </div>

                <!-- 생성된 벡터스토어 목록 -->
                <div class="summary-box">
                    <h3>생성된 벡터스토어 목록:</h3>
                    <div id="vectorstoreList" class="file-list" style="margin-top: 15px;">
                        <table class="file-table">
                            <thead>
                                <tr>
                                    <th style="width: 150px;">순번</th>
                                    <th>폴더명</th>
                                    <th>문서수량</th>
                                    <th>생성날짜</th>
                                    <th>상태</th>
                                </tr>
                            </thead>
                            <tbody id="vectorstoreTableBody">
                                <tr>
                                    <td colspan="5" style="text-align: center; color: #666; padding: 15px;">불러오는 중...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 진행 모달 -->
    <div id="progressModal" class="modal" style="display: none;">
        <div class="modal-content">
            <h3>벡터스토어 생성 중...</h3>
            <div id="progressStatus" style="margin: 20px 0;">
                <p id="statusText">초기화 중...</p>
            </div>
            <div class="progress-bar-container">
                <div id="progressBar" class="progress-bar"></div>
            </div>
            <div id="finalResult" style="margin-top: 20px; display: none;">
                <p id="resultText" style="font-size: 18px; font-weight: bold;"></p>
            </div>
            <button id="closeModalBtn" class="upload-btn" style="margin-top: 20px; display: none;">닫기</button>
        </div>
    </div>

    <script>
        const createVectorStoreBtn = document.getElementById('createVectorStoreBtn');
        const progressModal = document.getElementById('progressModal');
        const statusText = document.getElementById('statusText');
        const progressBar = document.getElementById('progressBar');
        const finalResult = document.getElementById('finalResult');
        const resultText = document.getElementById('resultText');
        const closeModalBtn = document.getElementById('closeModalBtn');
        const resultMessage = document.getElementById('resultMessage');
        const vectorstoreTableBody = document.getElementById('vectorstoreTableBody');

        // 벡터스토어 목록 불러오기
        async function loadVectorStoreList() {
            try {
                const response = await fetch('/api/vectorstore-list');
                const data = await response.json();
                
                if (data.success && data.folders.length > 0) {
                    // 데이터를 전역 변수에 저장
                    window.vectorstoreData = data.folders;
                    
                    const rowsHTML = data.folders.map((folder, index) => {
                        const displayId = index === 0 
                            ? `<span style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 4px 10px; border-radius: 12px; font-size: 12px;">최신</span>`
                            : folder.id;
                        
                        // 첫 번째 행(최신)은 운영중 버튼, 나머지는 삭제 버튼
                        const buttonHtml = index === 0
                            ? `<button onclick="alert('현재 운영중인 벡터스토어 입니다.'); return false;" style="padding: 8px 16px; background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 600; transition: all 0.3s; box-shadow: 0 2px 4px rgba(17, 153, 142, 0.3);" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 4px 8px rgba(17, 153, 142, 0.5)';" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 2px 4px rgba(17, 153, 142, 0.3)';">
                                    ✅ 운영중
                                </button>`
                            : `<button onclick="deleteVectorStore(${folder.id})" style="padding: 8px 16px; background: #f5576c; color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 14px; font-weight: 600; transition: all 0.3s;" onmouseover="this.style.background='#e0485c'; this.style.transform='translateY(-2px)';" onmouseout="this.style.background='#f5576c'; this.style.transform='translateY(0)';">
                                    🗑️ 삭제
                                </button>`;
                        
                        return `
                        <tr data-index="${index}" data-folder-id="${folder.id}">
                            <td style="text-align: center; font-weight: 600; color: #6a4c93;">${displayId}</td>
                            <td>${folder.name}</td>
                            <td>${folder.fileCount}개</td>
                            <td>${folder.date}</td>
                            <td style="text-align: center;">
                                ${buttonHtml}
                            </td>
                        </tr>
                        `;
                    }).join('');
                    vectorstoreTableBody.innerHTML = rowsHTML;
                    
                    // 클릭 이벤트 추가
                    vectorstoreTableBody.querySelectorAll('tr').forEach(row => {
                        row.addEventListener('click', function(e) {
                            // 버튼 클릭 시에는 행 선택 동작 안 함
                            if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
                                return;
                            }
                            
                            // 이전 선택 제거
                            vectorstoreTableBody.querySelectorAll('tr').forEach(r => r.classList.remove('selected'));
                            // 현재 행 선택
                            this.classList.add('selected');
                        });
                    });
                    
                    // 첫 번째 행(최신) 자동 선택
                    const firstRow = vectorstoreTableBody.querySelector('tr');
                    if (firstRow) {
                        firstRow.classList.add('selected');
                    }
                } else {
                    vectorstoreTableBody.innerHTML = '<tr><td colspan="5" style="text-align: center; color: #666;">생성된 벡터스토어가 없습니다.</td></tr>';
                }
            } catch (error) {
                console.error('Error loading vectorstore list:', error);
                vectorstoreTableBody.innerHTML = '<tr><td colspan="5" style="text-align: center; color: red;">목록을 불러오는데 실패했습니다.</td></tr>';
            }
        }

        // 벡터스토어 삭제 함수 (전역으로 등록)
        window.deleteVectorStore = async function(folderId) {
            const folderName = window.vectorstoreData?.find(f => f.id === folderId)?.name || '';
            
            // 확인 다이얼로그
            const confirmed = confirm(`정말로 "${folderName}" 벡터스토어를 삭제하시겠습니까?`);
            if (!confirmed) {
                return;
            }

            try {
                const response = await fetch(`/api/delete-vectorstore/${folderId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();

                if (data.success) {
                    alert('✅ 벡터스토어가 삭제되었습니다.');
                    // 목록 새로고침
                    loadVectorStoreList();
                } else {
                    alert('❌ 벡터스토어 삭제에 실패했습니다: ' + (data.message || '알 수 없는 오류'));
                }
            } catch (error) {
                console.error('벡터스토어 삭제 오류:', error);
                alert('❌ 네트워크 오류: ' + error.message);
            }
        };

        // 페이지 로드 시 목록 불러오기
        loadVectorStoreList();

        // 진행바 업데이트 함수
        function updateProgress(percent, text) {
            progressBar.style.width = percent + '%';
            progressBar.textContent = Math.round(percent) + '%';
            statusText.textContent = text;
        }

        // Python 출력 파싱하여 진행률 업데이트
        function parseProgress(output) {
            const lines = output.split('\n');
            
            for (let line of lines) {
                if (line.includes('MySQL 연결 성공')) {
                    updateProgress(10, 'MySQL 연결 성공');
                } else if (line.includes('문서 로드 완료')) {
                    // 문서 개수 추출
                    const match = line.match(/(\d+)개 문서/);
                    if (match) {
                        updateProgress(25, `${match[1]}개 문서 로드 완료`);
                    }
                } else if (line.includes('청킹 완료')) {
                    updateProgress(40, '문서 청킹 완료');
                } else if (line.includes('임베딩 모델 설정 완료')) {
                    updateProgress(60, '임베딩 모델 설정 완료');
                } else if (line.includes('벡터스토어 생성 중')) {
                    updateProgress(80, '벡터스토어 생성 중...');
                } else if (line.includes('벡터스토어 구축 완료')) {
                    updateProgress(100, '완료!');
                }
            }
        }

        // 문서 개수 추출
        function extractDocumentCount(output) {
            const match = output.match(/MySQL에서 (\d+)개 문서 로드 완료/);
            return match ? match[1] : null;
        }

        // 벡터스토어 생성 버튼 클릭 이벤트
        createVectorStoreBtn.addEventListener('click', async () => {
            // 확인 다이얼로그
            const confirmed = confirm('벡터스토어를 생성하시겠습니까?');
            if (!confirmed) {
                return;
            }

            // 모달 열기
            progressModal.style.display = 'flex';
            statusText.textContent = '벡터스토어 생성을 시작합니다...';
            progressBar.style.width = '0%';
            progressBar.textContent = '0%';
            finalResult.style.display = 'none';
            closeModalBtn.style.display = 'none';
            createVectorStoreBtn.disabled = true;

            // 초기 진행률 표시
            updateProgress(5, '벡터스토어 생성을 시작합니다...');

            try {
                // API 호출 시작 - 진행률 업데이트
                updateProgress(10, '서버에 요청을 보내는 중...');
                
                const response = await fetch('/api/create-vectorstore', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                // 응답 대기 중 진행률 업데이트
                updateProgress(20, '서버에서 처리 중...');

                const data = await response.json();

                if (data.success) {
                    // 진행바 업데이트 - 단계별로 표시
                    const output = data.output || '';
                    
                    // 출력이 있으면 단계별 진행률 표시
                    if (output) {
                        const lines = output.split('\n');
                        let foundProgress = 20;
                        let foundMessage = '처리 중...';
                        
                        // 출력에서 각 단계를 찾아서 진행률 업데이트 (순서대로)
                        for (let line of lines) {
                            if (line.includes('MySQL 연결 성공')) {
                                foundProgress = 15;
                                foundMessage = 'MySQL 연결 성공';
                            } else if (line.includes('문서 로드 완료')) {
                                const match = line.match(/(\d+)개 문서/);
                                if (match) {
                                    foundProgress = 30;
                                    foundMessage = `${match[1]}개 문서 로드 완료`;
                                }
                            } else if (line.includes('청킹 완료')) {
                                foundProgress = 50;
                                foundMessage = '문서 청킹 완료';
                            } else if (line.includes('임베딩 모델 설정 완료')) {
                                foundProgress = 70;
                                foundMessage = '임베딩 모델 설정 완료';
                            } else if (line.includes('벡터스토어 생성 중')) {
                                foundProgress = 85;
                                foundMessage = '벡터스토어 생성 중...';
                            } else if (line.includes('벡터스토어 구축 완료')) {
                                foundProgress = 100;
                                foundMessage = '벡터스토어 구축 완료!';
                                break; // 완료되면 루프 종료
                            }
                        }
                        
                        // 최종 진행률 업데이트
                        updateProgress(foundProgress, foundMessage);
                        
                        // 완료가 아니면 100%로 설정
                        if (foundProgress < 100) {
                            setTimeout(() => {
                                updateProgress(100, '완료!');
                            }, 200);
                        }
                    } else {
                        // 출력이 없으면 완료로 표시
                        updateProgress(100, '완료!');
                    }
                    
                    // 완료 메시지
                    setTimeout(() => {
                        const docCount = extractDocumentCount(output);
                        if (docCount) {
                            finalResult.style.display = 'block';
                            resultText.textContent = `✅ 벡터스토어 생성 완료! (${docCount}개 문서)`;
                            resultText.style.color = 'green';
                        } else {
                            finalResult.style.display = 'block';
                            resultText.textContent = '✅ 벡터스토어 생성 완료!';
                            resultText.style.color = 'green';
                        }
                        closeModalBtn.style.display = 'block';
                        // 목록 새로고침
                        loadVectorStoreList();
                    }, 500);
                } else {
                    updateProgress(0, '오류 발생');
                    finalResult.style.display = 'block';
                    resultText.textContent = '❌ 벡터스토어 생성 실패: ' + (data.message || '알 수 없는 오류');
                    resultText.style.color = 'red';
                    closeModalBtn.style.display = 'block';
                }
            } catch (error) {
                updateProgress(0, '네트워크 오류');
                finalResult.style.display = 'block';
                resultText.textContent = '❌ 네트워크 오류: ' + error.message;
                resultText.style.color = 'red';
                closeModalBtn.style.display = 'block';
            } finally {
                createVectorStoreBtn.disabled = false;
            }
        });

        // 모달 닫기 버튼
        closeModalBtn.addEventListener('click', () => {
            progressModal.style.display = 'none';
        });

        // 모달 외부 클릭 시 닫기
        window.addEventListener('click', (event) => {
            if (event.target === progressModal) {
                progressModal.style.display = 'none';
            }
        });

        // 벡터스토어 검색 기능
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const searchResults = document.getElementById('searchResults');
        let selectedVectorstoreId = null;

        // 벡터스토어 선택 이벤트
        document.addEventListener('click', function(e) {
            const row = e.target.closest('tr');
            if (row && e.target.tagName !== 'BUTTON') {
                // 이전 선택 제거
                vectorstoreTableBody.querySelectorAll('tr').forEach(r => r.classList.remove('selected'));
                // 현재 행 선택
                row.classList.add('selected');
                
                const folderId = row.getAttribute('data-folder-id');
                selectedVectorstoreId = folderId;
                console.log('선택된 벡터스토어 ID:', selectedVectorstoreId);
                
                // 선택된 벡터스토어 표시
                const selectedVectorstoreInfo = window.vectorstoreData?.find(f => f.id === folderId);
                if (selectedVectorstoreInfo) {
                    console.log(`✅ 검색에 사용될 벡터스토어: ${selectedVectorstoreInfo.name} (${selectedVectorstoreInfo.fileCount}개 문서)`);
                }
            }
        });

        // 검색 버튼 클릭 이벤트
        searchBtn.addEventListener('click', async function() {
            const query = searchInput.value.trim();
            
            if (!query) {
                searchResults.innerHTML = '<div style="padding: 15px; border-radius: 6px; background: linear-gradient(135deg, #f8e0e0 0%, #f5c8c8 100%); color: #842029; border-left: 3px solid #dc3545;">❌ 검색어를 입력해주세요.</div>';
                return;
            }

            searchBtn.disabled = true;
            searchResults.innerHTML = '<div style="text-align: center; padding: 20px;"><div style="display: inline-block; width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #6a4c93; border-radius: 50%; animation: spin 1s linear infinite;"></div><p style="margin-top: 10px; color: #666;">검색 중...</p></div>';

            try {
                const response = await fetch('/api/search-vectorstore', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ query: query, vectorstoreId: selectedVectorstoreId })
                });

                const data = await response.json();
                
                if (data.success && data.results && data.results.length > 0) {
                    // 검색 정보 표시
                    const selectedInfo = selectedVectorstoreId 
                        ? window.vectorstoreData?.find(f => f.id === selectedVectorstoreId)
                        : window.vectorstoreData?.[0];
                    
                    let resultsHTML = `
                        <div style="margin-bottom: 15px; padding: 12px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 8px;">
                            <div style="font-size: 14px; font-weight: 600;">🔍 검색어: "${query}"</div>
                            <div style="font-size: 12px; opacity: 0.9; margin-top: 4px;">
                                📦 사용된 벡터스토어: ${selectedInfo ? `${selectedInfo.name} (${selectedInfo.fileCount}개 문서)` : '최신 벡터스토어'}
                            </div>
                        </div>
                    `;
                    resultsHTML += '<div style="margin-top: 20px;">';
                    data.results.forEach(item => {
                        const medal = item.rank === 1 ? '🥇' : item.rank === 2 ? '🥈' : item.rank === 3 ? '🥉' : '🏅';
                        const relevanceColor = item.relevance >= 80 ? '#10b981' : item.relevance >= 50 ? '#f59e0b' : '#ef4444';
                        resultsHTML += `
                            <div style="margin-bottom: 20px; padding: 20px; background: #ffffffcc; border-radius: 8px; border-left: 4px solid #6a4c93;">
                                <div style="display: flex; align-items: flex-start; gap: 15px;">
                                    <div style="font-size: 36px; flex-shrink: 0;">${medal}</div>
                                    <div style="flex: 1;">
                                        <div style="display: flex; align-items: center; gap: 10px; margin-bottom: 10px; flex-wrap: wrap;">
                                            <div style="font-size: 18px; font-weight: 600; color: #6a4c93;">
                                                검색리스트 ${item.rank} - ${item.file_name}
                                            </div>
                                            <div style="padding: 6px 16px; background: ${relevanceColor}; color: white; border-radius: 20px; font-weight: 700; font-size: 16px; box-shadow: 0 2px 8px ${relevanceColor}66;">
                                                ${item.relevance}% 유사도
                                            </div>
                                        </div>
                                        <div style="margin-bottom: 10px;">
                                            <span style="font-size: 14px; color: #666; padding: 6px 12px; background: rgba(106, 76, 147, 0.1); border-radius: 4px;">📁 ${item.file_location}</span>
                                        </div>
                                        <div style="margin-bottom: 10px;">
                                            <strong style="color: #333;">📝 요약:</strong>
                                            <div style="padding: 12px; background: rgba(106, 76, 147, 0.05); border-radius: 6px; margin-top: 6px;">
                                                ${item.summary}
                                            </div>
                                        </div>
                                        <div style="margin-bottom: 10px;">
                                            <strong style="color: #333;">🗝️ 키워드:</strong>
                                            <div style="padding: 12px; background: rgba(106, 76, 147, 0.05); border-radius: 6px; margin-top: 6px;">
                                                ${item.keywords}
                                            </div>
                                        </div>
                                        <div>
                                            <strong style="color: #333;">📄 내용 미리보기:</strong>
                                            <div style="padding: 12px; background: rgba(106, 76, 147, 0.05); border-radius: 6px; margin-top: 6px; white-space: pre-wrap; word-break: break-word;">
                                                ${item.content_preview}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                    });
                    resultsHTML += '</div>';
                    searchResults.innerHTML = resultsHTML;
                } else if (data.ollamaError) {
                    searchResults.innerHTML = `
                        <div style="padding: 30px; border-radius: 12px; background: linear-gradient(135deg, #fff3cd 0%, #ffe69c 100%); color: #856404; border-left: 5px solid #ffc107; text-align: center; box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3);">
                            <div style="font-size: 64px; margin-bottom: 20px;">⚠️</div>
                            <div style="font-size: 24px; font-weight: 700; margin-bottom: 15px; color: #856404;">
                                Ollama 서버가 꺼져 있습니다
                            </div>
                            <div style="font-size: 17px; margin-bottom: 20px; color: #856404;">
                                Ollama 서버를 실행한 후 다시 시도해주세요.
                            </div>
                            <div style="font-size: 15px; color: #856404; opacity: 0.9; line-height: 1.8;">
                                <strong>다음 명령어로 Ollama 서버를 실행하세요:</strong><br>
                                <code style="background: rgba(0,0,0,0.1); padding: 10px 16px; border-radius: 6px; font-family: 'Courier New', monospace; display: inline-block; margin-top: 12px; font-size: 16px; color: #856404;">ollama serve & ollama pull exaone3.5:2.4b</code>
                            </div>
                        </div>
                    `;
                } else {
                    searchResults.innerHTML = `
                        <div style="padding: 15px; border-radius: 6px; background: linear-gradient(135deg, #f8e0e0 0%, #f5c8c8 100%); color: #842029; border-left: 3px solid #dc3545;">
                            ❌ 검색 결과가 없습니다.
                        </div>
                    `;
                }
            } catch (error) {
                console.error('검색 오류:', error);
                searchResults.innerHTML = `
                    <div style="padding: 15px; border-radius: 6px; background: linear-gradient(135deg, #f8e0e0 0%, #f5c8c8 100%); color: #842029; border-left: 3px solid #dc3545;">
                        ❌ 검색 중 오류가 발생했습니다: ${error.message}
                    </div>
                `;
            } finally {
                searchBtn.disabled = false;
            }
        });

        // CSS 애니메이션 추가
        const style = document.createElement('style');
        style.textContent = `
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>

