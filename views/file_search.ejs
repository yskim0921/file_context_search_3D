<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>문서내용 검색파일</title>
    <link rel="stylesheet" href="/css/common.css">
    <link rel="stylesheet" href="/css/file_upload.css">
    <link rel="stylesheet" href="/css/file_rag.css">
    <style>
        /* 진행 상황 모달 스타일 */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            animation: fadeIn 0.3s ease-in-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .modal-content-progress {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            padding: 40px;
            min-width: 500px;
            max-width: 600px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.3s ease-out;
        }
        
        @keyframes slideIn {
            from {
                transform: translateY(-30px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
        
        .modal-header-progress h2 {
            color: white;
            margin: 0 0 30px 0;
            font-size: 28px;
            font-weight: 700;
            text-align: center;
        }
        
        .modal-body-progress {
            text-align: center;
        }
        
        .progress-status {
            color: white;
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 20px;
            min-height: 30px;
        }
        
        .progress-bar-container {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 30px;
            height: 50px;
            overflow: hidden;
            margin-bottom: 15px;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .progress-bar-fill {
            background: linear-gradient(90deg, #ffd700 0%, #ffed4e 50%, #ffff00 100%);
            height: 100%;
            border-radius: 30px;
            width: 0%;
            transition: width 0.6s cubic-bezier(0.4, 0.0, 0.2, 1);
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.5);
            animation: shimmer 2s infinite;
        }
        
        @keyframes shimmer {
            0% {
                background-position: -200% center;
            }
            100% {
                background-position: 200% center;
            }
        }
        
        .progress-percentage {
            color: white;
            font-size: 32px;
            font-weight: 700;
            letter-spacing: 2px;
        }
    </style>
</head>
<body>
    <!-- 진행 상황 모달 -->
    <div id="progressModal" class="modal-overlay" style="display: none;">
        <div class="modal-content-progress">
            <div class="modal-header-progress">
                <h2 id="modalTitle">AI 검색</h2>
            </div>
            <div class="modal-body-progress">
                <div class="progress-status" id="progressStatus">초기화 중...</div>
                <div class="progress-bar-container">
                    <div class="progress-bar-fill" id="progressBar"></div>
                </div>
                <div class="progress-percentage" id="progressPercentage">0%</div>
            </div>
        </div>
    </div>

    <div class="page-wrapper">
        <div class="page-header">
            <div class="title-container">
                <h1>문서내용 검색파일</h1>
                <a href="/file_manager" class="back-link-small">파일관리프로그램 바로가기</a>
            </div>
        </div>
        
        <!-- 기능 선택 네비게이션 -->
        <div class="content-card">
            <h2>기능 선택</h2>
            <div class="button-container">
                <a href="/file_upload" class="upload-link">파일업로드</a>
                <a href="/folder_upload" class="folder-link">폴더 업로드</a>
                <a href="/vectorstore" class="vector-link">벡터스토어 만들기</a>
                <a href="/file_search" class="search-link">문서내용 검색파일</a>
            </div>
        </div>
        
        <div class="content-card">
            <h2>AI로 문서내용 파일 찾기</h2>
            <div style="margin-bottom: 20px;">
                <textarea id="aiSearchInput" placeholder="어떤 내용의 문서를 찾고 있나요? 예: '프로젝트 관리 방법에 대한 문서', '보안 정책 관련 문서' 등..." style="width: 100%; min-height: 120px; padding: 16px; border: 2px solid var(--border-color); border-radius: 8px; font-size: 16px; font-family: inherit; resize: vertical; box-sizing: border-box;"></textarea>
            </div>
            <button id="aiSearchBtn" class="upload-btn" style="padding: 14px 32px; font-size: 17px; font-weight: 600; cursor: pointer;">
                🔍 AI 검색 실행
            </button>
            <div id="aiSearchResults" style="margin-top: 20px;"></div>
        </div>

        <div class="content-card">
            <h2>AI 검색 기록</h2>
            <div id="searchHistory" class="file-list" style="min-height: 200px;">
                <p style="text-align: center; color: var(--text-muted);">불러오는 중...</p>
            </div>
        </div>

        <div class="content-card">
            <h2>파일명으로 검색</h2>
            <div style="margin-bottom: 20px; display: flex; gap: 10px;">
                <input type="text" id="searchInput" placeholder="파일명을 입력하세요..." style="flex: 1; padding: 14px; border: 2px solid var(--border-color); border-radius: 8px; font-size: 16px;">
                <button id="searchBtn" class="upload-btn" style="padding: 12px 24px; margin: 0; font-size: 16px; font-weight: 600;">검색</button>
            </div>
            <div id="searchResults" class="file-list"></div>
        </div>
    </div>

    <script>
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.getElementById('searchBtn');
        const searchResults = document.getElementById('searchResults');
        const aiSearchInput = document.getElementById('aiSearchInput');
        const aiSearchBtn = document.getElementById('aiSearchBtn');
        const aiSearchResults = document.getElementById('aiSearchResults');
        const searchHistory = document.getElementById('searchHistory');
        let allFiles = [];
        
        // 검색 기록 페이징 관련 변수
        let currentHistoryPage = 1;
        const historyItemsPerPage = 3;
        let allHistoryItems = [];

        // 페이지 로드 시 모든 파일 가져오기
        async function loadAllFiles() {
            try {
                const response = await fetch('/api/files');
                const data = await response.json();
                
                if (data.success) {
                    allFiles = data.files;
                }
            } catch (error) {
                console.error('Error loading files:', error);
            }
        }

        // 검색 함수
        function performSearch() {
            const searchTerm = searchInput.value.toLowerCase().trim();
            
            if (searchTerm === '') {
                displayFiles(allFiles);
            } else {
                const filteredFiles = allFiles.filter(file => 
                    file.filename.toLowerCase().includes(searchTerm)
                );
                displayFiles(filteredFiles);
            }
        }

        // AI 검색 버튼 클릭 이벤트
        aiSearchBtn.addEventListener('click', async function() {
            const query = aiSearchInput.value.trim();
            
            if (!query) {
                aiSearchResults.innerHTML = '<div class="error" style="padding: 10px; border-radius: 6px; background: linear-gradient(135deg, #f8e0e0 0%, #f5c8c8 100%); color: #842029; border-left: 3px solid #dc3545;">검색어를 입력해주세요.</div>';
                return;
            }
            
            console.log('AI 검색 시작:', query);
            
            // 검색 모달 표시 (progress bar 포함)
            showProgressModal('AI 검색');
            updateProgress(10, '🔍 Ollama 서버 확인 중...');
            aiSearchBtn.disabled = true;
            
            try {
                updateProgress(20, '🔑 ChromaDB 검색 중...');
                
                const response = await fetch('/api/ai-search', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ query: query })
                });
                
                updateProgress(50, '📊 유사도 계산 중...');
                
                const data = await response.json();
                console.log('API 응답 데이터:', data);
                
                // Ollama 서버 오류 체크
                if (!data.success && data.ollamaError) {
                    // 진행 모달을 오류 메시지로 변경 (빨간색 진행 바)
                    updateProgress(0, '❌ Ollama 서버가 연결되지 않았습니다', true);
                    
                    // 모달 제목과 상태를 오류로 변경
                    document.getElementById('modalTitle').textContent = '⚠️ Ollama 서버 오류';
                    document.getElementById('modalTitle').style.color = '#ffc107';
                    
                    // 5초 후 모달 닫기
                    setTimeout(() => {
                        closeProgressModal();
                        
                        // 에러 메시지 표시
                        aiSearchResults.innerHTML = `
                            <div class="error" style="padding: 30px; border-radius: 12px; background: linear-gradient(135deg, #fff3cd 0%, #ffe69c 100%); color: #856404; border-left: 5px solid #ffc107; text-align: center; box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3);">
                                <div style="font-size: 64px; margin-bottom: 20px;">⚠️</div>
                                <div style="font-size: 24px; font-weight: 700; margin-bottom: 15px; color: #856404;">
                                    Ollama 서버가 꺼져 있습니다
                                </div>
                                <div style="font-size: 17px; margin-bottom: 20px; color: #856404;">
                                    ${data.message || 'Ollama 서버가 실행되지 않았습니다.'}
                                </div>
                                ${data.details ? `<div style="font-size: 15px; color: #856404; opacity: 0.85; margin-bottom: 20px; padding: 12px; background: rgba(255,255,255,0.5); border-radius: 8px;">
                                    ${data.details}
                                </div>` : ''}
                                <div style="font-size: 15px; color: #856404; opacity: 0.9; line-height: 1.8;">
                                    <strong>다음 명령어로 Ollama 서버를 실행하세요:</strong><br>
                                    <code style="background: rgba(0,0,0,0.1); padding: 10px 16px; border-radius: 6px; font-family: 'Courier New', monospace; display: inline-block; margin-top: 12px; font-size: 16px; color: #856404;">ollama serve & ollama pull exaone3.5:2.4b</code>
                                </div>
                            </div>
                        `;
                        aiSearchBtn.disabled = false;
                    }, 5000);
                    return;
                }
                
                updateProgress(80, '🤖 AI 답변 생성 중...');
                
                if (data.success) {
                    console.log('AI 검색 성공');
                    updateProgress(100, '✅ AI 검색 완료!');
                    
                    setTimeout(async () => {
                        closeProgressModal();
                        
                        // AI 검색 기록 리스트와 동일한 디자인으로 표시
                        const now = new Date().toLocaleString('ko-KR');
                        
                        // 순위 정보 추출
                        let rankingInfo = '';
                        if (data.rankingResult) {
                            try {
                                const rankingList = typeof data.rankingResult === 'string' ? JSON.parse(data.rankingResult) : data.rankingResult;
                                if (Array.isArray(rankingList) && rankingList.length > 0) {
                                    const top3 = rankingList.slice(0, 3);
                                    const medals = ['🥇', '🥈', '🥉'];
                                    rankingInfo = top3.map((rank, idx) => {
                                        const medal = medals[idx] || '🏅';
                                        return `${medal} ${(rank.file_name || '').replace(/'/g, '')} (${rank.relevance || 0}%)`;
                                    }).join(', ');
                                }
                            } catch (e) {
                                console.error('순위 정보 추출 실패:', e);
                            }
                        }
                        
                        // 간단한 리스트 형태로 표시
                        const queryEscaped = query.replace(/'/g, "\\'");
                        const aiAnswerEscaped = (data.aiAnswer || '').replace(/'/g, "\\'");
                        const htmlFilePath = data.htmlFilePath || '';
                        const barChartPath = data.barChartPath || '';
                        const chromaPath = data.chromaPath || '';
                        const rankingResultRaw = typeof data.rankingResult === 'string' ? data.rankingResult : JSON.stringify(data.rankingResult || '');
                        const rankingResultEscaped = rankingResultRaw.replace(/'/g, "\\'");
                        
                        // aiSearchResults에 추가하지 않고, 검색 기록만 새로고침
                        
                        // 검색 기록 섹션으로 스크롤
                        searchHistory.scrollIntoView({ behavior: 'smooth', block: 'start' });
                        
                        // 검색 기록 새로고침
                        await loadSearchHistory();
                        
                        // 2초 후에 첫 번째 file-item 클릭
                        setTimeout(() => {
                            const fileItems = searchHistory.querySelectorAll('.file-item');
                            if (fileItems.length > 0) {
                                // 첫 번째 file-item 내부의 클릭 가능한 요소를 찾아서 클릭
                                const firstItem = fileItems[0];
                                const clickableElement = firstItem.querySelector('[onclick]');
                                if (clickableElement) {
                                    clickableElement.click();
                                }
                            }
                        }, 100);
                        
                        aiSearchBtn.disabled = false;
                    }, 1000);
                } else {
                    closeProgressModal();
                    aiSearchResults.innerHTML = `
                        <div class="error" style="padding: 15px; border-radius: 6px; background: linear-gradient(135deg, #f8e0e0 0%, #f5c8c8 100%); color: #842029; border-left: 3px solid #dc3545;">
                            ❌ 검색 중 오류가 발생했습니다: ${data.message}
                        </div>
                    `;
                    aiSearchBtn.disabled = false;
                }
            } catch (error) {
                console.error('AI 검색 오류:', error);
                closeProgressModal();
                
                // Ollama 연결 오류인지 확인
                if (error.message && error.message.includes('ECONNREFUSED')) {
                    aiSearchResults.innerHTML = `
                        <div class="error" style="padding: 30px; border-radius: 12px; background: linear-gradient(135deg, #fff3cd 0%, #ffe69c 100%); color: #856404; border-left: 5px solid #ffc107; text-align: center; box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3);">
                            <div style="font-size: 64px; margin-bottom: 20px;">⚠️</div>
                            <div style="font-size: 24px; font-weight: 700; margin-bottom: 15px; color: #856404;">
                                Ollama 서버가 꺼져 있습니다
                            </div>
                            <div style="font-size: 17px; margin-bottom: 20px; color: #856404;">
                                Ollama 서버에 연결할 수 없습니다.
                            </div>
                            <div style="font-size: 15px; color: #856404; opacity: 0.9; line-height: 1.8;">
                                <strong>다음 명령어로 Ollama 서버를 실행하세요:</strong><br>
                                <code style="background: rgba(0,0,0,0.1); padding: 10px 16px; border-radius: 6px; font-family: 'Courier New', monospace; display: inline-block; margin-top: 12px; font-size: 16px; color: #856404;">ollama serve</code>
                            </div>
                        </div>
                    `;
                } else {
                    aiSearchResults.innerHTML = `
                        <div class="error" style="padding: 15px; border-radius: 6px; background: linear-gradient(135deg, #f8e0e0 0%, #f5c8c8 100%); color: #842029; border-left: 3px solid #dc3545;">
                            ❌ AI 검색 중 오류가 발생했습니다: ${error.message}<br>
                            <small style="color: #842029; opacity: 0.8;">브라우저 콘솔을 확인하여 자세한 정보를 확인하세요.</small>
                        </div>
                    `;
                }
                aiSearchBtn.disabled = false;
            }
        });

        // 검색 버튼 클릭 이벤트
        searchBtn.addEventListener('click', performSearch);

        // 엔터 키로 검색
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                performSearch();
            }
        });

        // 파일 목록 표시
        function displayFiles(files) {
            if (files.length > 0) {
                searchResults.innerHTML = files.map(file => `
                    <div class="file-item">
                        <div class="file-info">
                            <span class="file-name">${file.filename}</span>
                            <span class="file-size">${formatFileSize(file.size)}</span>
                            <span class="file-date">${formatDate(file.uploadDate)}</span>
                        </div>
                    </div>
                `).join('');
            } else {
                searchResults.innerHTML = '<p style="color: var(--text-muted); font-size: 12px;">검색 결과가 없습니다.</p>';
            }
        }

        // 파일 크기 포맷
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];
        }

        // 날짜 포맷
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('ko-KR', { 
                year: 'numeric', 
                month: '2-digit', 
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        // 검색 기록 불러오기
        async function loadSearchHistory() {
            try {
                const response = await fetch('/api/search-history');
                const data = await response.json();
                
                if (data.success && data.history.length > 0) {
                    allHistoryItems = data.history;
                    displayHistoryPage();
                } else {
                    searchHistory.innerHTML = '<p style="text-align: center; color: var(--text-muted);">검색 기록이 없습니다.</p>';
                }
            } catch (error) {
                console.error('Error loading search history:', error);
                searchHistory.innerHTML = '<p style="text-align: center; color: red;">검색 기록을 불러오는데 실패했습니다.</p>';
            }
        }
        
        // 검색 기록 페이지 표시
        function displayHistoryPage() {
            const totalPages = Math.ceil(allHistoryItems.length / historyItemsPerPage);
            const startIndex = (currentHistoryPage - 1) * historyItemsPerPage;
            const endIndex = startIndex + historyItemsPerPage;
            const currentItems = allHistoryItems.slice(startIndex, endIndex);
            
            if (currentItems.length > 0) {
                let historyHTML = '<div>';
                
                currentItems.forEach(item => {
                    // 순위 정보 생성
                    let rankingInfo = '';
                    if (item.rankingResult && Array.isArray(item.rankingResult) && item.rankingResult.length > 0) {
                        const top3 = item.rankingResult.slice(0, 3);
                        const medals = ['🥇', '🥈', '🥉'];
                        rankingInfo = top3.map((rank, idx) => {
                            const medal = medals[idx] || '🏅';
                            return `${medal} ${(rank.file_name || '').replace(/'/g, '')} (${rank.relevance || 0}%)`;
                        }).join(', ');
                    }
                    
                    // 안전한 문자열 처리를 위한 함수
                    const escapeHtml = (str) => {
                        if (!str) return '';
                        return String(str)
                            .replace(/&/g, '&amp;')
                            .replace(/</g, '&lt;')
                            .replace(/>/g, '&gt;')
                            .replace(/"/g, '&quot;')
                            .replace(/'/g, '&#039;');
                    };
                    
                    const safeQuery = escapeHtml(item.query);
                    const safeHtmlPath = escapeHtml(item.htmlFilePath || '');
                    const safeBarPath = escapeHtml(item.barChartPath || '');
                    
                    historyHTML += `
                        <div class="file-item" style="margin-bottom: 10px;">
                            <div style="padding: 16px; background: var(--bg-secondary); border-radius: 6px; cursor: pointer;" onclick="viewSearchHistory(${item.id}, '${safeHtmlPath}', '${safeBarPath}', '${safeQuery.replace(/'/g, "\\'")}')">
                                <div style="font-size: 16px; font-weight: 600; color: var(--primary-color); margin-bottom: 8px;">
                                    🔍 ${item.query}
                                </div>
                                ${rankingInfo ? `<div style="font-size: 14px; color: var(--secondary-color); margin-bottom: 6px; line-height: 1.5; word-break: break-all;">
                                    ${rankingInfo}
                                </div>` : ''}
                                <div style="font-size: 14px; color: var(--text-muted);">
                                    📅 ${item.createdAt}
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                historyHTML += '</div>';
                
                // 페이징 버튼 추가
                if (totalPages > 1) {
                    historyHTML += createHistoryPaginationHtml(currentHistoryPage, totalPages, allHistoryItems.length);
                }
                
                searchHistory.innerHTML = historyHTML;
            } else {
                searchHistory.innerHTML = '<p style="text-align: center; color: var(--text-muted);">검색 기록이 없습니다.</p>';
            }
        }
        
        // 페이징 버튼 HTML 생성
        function createHistoryPaginationHtml(currentPage, totalPages, totalItems) {
            let html = '<div class="pagination" style="margin-top: 20px; display: flex; justify-content: center; align-items: center; gap: 10px; flex-wrap: wrap;">';
            
            // 이전 버튼
            if (currentPage > 1) {
                html += `<button class="page-btn" onclick="goToHistoryPage(${currentPage - 1})" style="padding: 8px 16px; background: var(--primary-color); color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">이전</button>`;
            } else {
                html += `<button class="page-btn disabled" disabled style="padding: 8px 16px; background: var(--border-color); color: var(--text-muted); border: none; border-radius: 6px; cursor: not-allowed;">이전</button>`;
            }
            
            // 페이지 번호
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);
            
            if (startPage > 1) {
                html += `<button class="page-btn" onclick="goToHistoryPage(1)" style="padding: 8px 16px; background: var(--primary-color); color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">1</button>`;
                if (startPage > 2) {
                    html += `<span class="page-ellipsis" style="padding: 8px 4px; color: var(--text-muted);">...</span>`;
                }
            }
            
            for (let i = startPage; i <= endPage; i++) {
                if (i === currentPage) {
                    html += `<button class="page-btn active" style="padding: 8px 16px; background: var(--primary-color); color: white; border: 2px solid var(--primary-color); border-radius: 6px; cursor: pointer; font-weight: 600; box-shadow: 0 2px 4px rgba(102, 126, 234, 0.3);">${i}</button>`;
                } else {
                    html += `<button class="page-btn" onclick="goToHistoryPage(${i})" style="padding: 8px 16px; background: var(--primary-color); color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">${i}</button>`;
                }
            }
            
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    html += `<span class="page-ellipsis" style="padding: 8px 4px; color: var(--text-muted);">...</span>`;
                }
                html += `<button class="page-btn" onclick="goToHistoryPage(${totalPages})" style="padding: 8px 16px; background: var(--primary-color); color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">${totalPages}</button>`;
            }
            
            // 다음 버튼
            if (currentPage < totalPages) {
                html += `<button class="page-btn" onclick="goToHistoryPage(${currentPage + 1})" style="padding: 8px 16px; background: var(--primary-color); color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">다음</button>`;
            } else {
                html += `<button class="page-btn disabled" disabled style="padding: 8px 16px; background: var(--border-color); color: var(--text-muted); border: none; border-radius: 6px; cursor: not-allowed;">다음</button>`;
            }
            
            html += `<span class="page-info" style="margin-left: 10px; color: var(--text-muted); font-size: 14px;">(총 ${totalItems}개)</span>`;
            html += '</div>';
            
            return html;
        }
        
        // 페이지 이동 함수
        function goToHistoryPage(page) {
            currentHistoryPage = page;
            displayHistoryPage();
            // 검색 기록 섹션으로 스크롤
            searchHistory.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
        
        // AI 검색 결과 확장 함수
        function expandSearchResult(query, aiAnswer, htmlFilePath, barChartPath, chromaPath, rankingResult) {
            let resultHTML = `
                <div style="padding: 24px; background: var(--bg-primary); border-radius: 8px; margin-top: 15px;">
                    <h3 style="margin-bottom: 15px; color: var(--text-primary); font-size: 20px;">🔍 검색 내용</h3>
                    <div style="padding: 15px; background: var(--bg-secondary); border-radius: 6px; margin-bottom: 20px; font-size: 18px;">
                        ${query}
                    </div>
            `;
            
            // ChromaDB 경로 표시
            if (chromaPath) {
                resultHTML += `
                    <div style="margin-top: 10px; margin-bottom: 20px;">
                        <div style="font-size: 15px; color: var(--text-muted);">
                            💾 사용된 벡터 DB: ${chromaPath}
                        </div>
                    </div>
                `;
            }
            
            // AI 답변 표시
            if (aiAnswer) {
                resultHTML += `
                    <div style="margin-bottom: 20px;">
                        <h3 style="margin-bottom: 10px; color: var(--primary-color); font-size: 22px;">🤖 AI 답변</h3>
                        <div class="file-item" style="margin-bottom: 10px;">
                            <div style="padding: 16px; background: var(--bg-secondary); border-radius: 6px;">
                                <div style="white-space: pre-wrap; word-wrap: break-word; font-family: inherit; font-size: 16px; line-height: 1.8; color: var(--text-primary);">${aiAnswer}</div>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // 검색된 문서 목록 표시
            if (rankingResult) {
                try {
                    const rankingList = typeof rankingResult === 'string' ? JSON.parse(rankingResult) : rankingResult;
                    
                    if (Array.isArray(rankingList) && rankingList.length > 0) {
                        resultHTML += `
                            <div style="margin-top: 20px;">
                                <h3 style="margin-bottom: 15px; color: var(--text-primary); font-size: 20px;">📊 검색 결과 순위</h3>
                                <div style="background: var(--bg-secondary); border-radius: 8px; overflow: hidden;">
                        `;
                        
                        rankingList.forEach((item, index) => {
                            const medal = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '💫';
                            resultHTML += `
                                <div style="padding: 18px; border-bottom: 1px solid var(--border-color); display: flex; align-items: flex-start; gap: 15px; transition: background-color 0.2s; border-radius: 6px; margin-bottom: 8px;">
                                    <div style="font-size: 32px; flex-shrink: 0; padding-top: 4px;">${medal}</div>
                                    <div style="flex: 1; min-width: 0;">
                                        <div style="font-weight: 600; color: var(--primary-color); margin-bottom: 8px; font-size: 18px;">
                                            📄 ${item.file_name || ''}
                                        </div>
                                        <div style="display: flex; gap: 15px; flex-wrap: wrap; margin-bottom: 8px;">
                                            ${item.file_location ? `<div style="font-size: 14px; color: var(--text-muted); padding: 6px 12px; background: rgba(102, 126, 234, 0.1); border-radius: 4px;">
                                                📁 ${item.file_location}
                                            </div>` : ''}
                                            <div style="font-size: 14px; color: white; padding: 6px 12px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 4px; font-weight: 600;">
                                                ⭐ ${item.relevance}%
                                            </div>
                                            ${item.keywords ? `<div style="font-size: 14px; color: var(--primary-color); padding: 6px 12px; background: rgba(102, 126, 234, 0.1); border-radius: 4px;">
                                                🔑 ${item.keywords}
                                            </div>` : ''}
                                        </div>
                                        ${item.summary ? `<div style="font-size: 15px; color: var(--text-secondary); line-height: 1.8; white-space: normal; word-wrap: break-word; word-break: break-word; overflow-wrap: break-word; margin-bottom: 10px; padding: 12px; background: linear-gradient(135deg, #f8f9ff 0%, #e8ecfd 100%); border-radius: 6px; border-left: 4px solid var(--primary-color);">
                                            <div style="font-weight: 600; margin-bottom: 6px; color: var(--primary-color); font-size: 16px;">📋 요약:</div>
                                            <div style="color: var(--text-primary); font-size: 16px;">${item.summary}</div>
                                        </div>` : ''}
                                    </div>
                                </div>
                            `;
                        });
                        
                        resultHTML += `
                                </div>
                            </div>
                        `;
                    }
                } catch (e) {
                    console.error('순위 리스트 파싱 오류:', e);
                }
            }
            
            // Bar Chart 표시
            if (barChartPath) {
                resultHTML += `
                    <div style="margin-top: 20px;">
                        <h3 style="font-size: 20px; margin-bottom: 15px; color: var(--text-primary);">📊 검색 결과 관련성</h3>
                        <iframe src="/${barChartPath}" style="width: 100%; height: 400px; border: 2px solid var(--border-color); border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"></iframe>
                    </div>
                `;
            }
            
            // 3D 시각화 표시
            if (htmlFilePath) {
                resultHTML += `
                    <div style="margin-top: 20px;">
                        <h3 style="font-size: 20px; margin-bottom: 15px; color: var(--text-primary);">🔍 3D 공간 시각화</h3>
                        <iframe src="/${htmlFilePath}" style="width: 100%; height: 700px; border: 2px solid var(--border-color); border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"></iframe>
                    </div>
                `;
            }
            
            resultHTML += `</div>`;
            
            aiSearchResults.innerHTML += resultHTML;
            
            // 결과 섹션으로 스크롤
            aiSearchResults.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        // AI 검색 결과 상세 보기 (간단 버전)
        function viewSearchResultInDetail(query, output, htmlFilePath, barChartPath) {
            // HTML 이스케이프 함수
            const escapeHtml = (str) => {
                if (!str) return '';
                return String(str)
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#039;');
            };
            
            const safeQuery = escapeHtml(query);
            const safeOutput = escapeHtml(output);
            const safeHtmlPath = escapeHtml(htmlFilePath);
            const safeBarPath = escapeHtml(barChartPath);
            
            let resultHTML = `
                <div style="padding: 24px; background: var(--bg-primary); border-radius: 8px; margin-top: 15px;">
                    <h3 style="margin-bottom: 15px; color: var(--text-primary); font-size: 20px;">🔍 검색 내용</h3>
                    <div style="padding: 15px; background: var(--bg-secondary); border-radius: 6px; margin-bottom: 20px; font-size: 18px;">
                        ${safeQuery}
                    </div>
            `;
            
            // AI 답변 표시
            if (output) {
                resultHTML += `
                    <div style="margin-bottom: 20px;">
                        <h3 style="margin-bottom: 10px; color: var(--primary-color); font-size: 22px;">🤖 AI 답변</h3>
                        <div class="file-item" style="margin-bottom: 10px;">
                            <div style="padding: 16px; background: var(--bg-secondary); border-radius: 6px;">
                                <div style="white-space: pre-wrap; word-wrap: break-word; font-family: inherit; font-size: 16px; line-height: 1.8; color: var(--text-primary);">${safeOutput}</div>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Bar Chart가 생성되었다면 표시
            if (barChartPath) {
                resultHTML += `
                    <div style="margin-top: 20px;">
                        <h3 style="font-size: 20px; margin-bottom: 15px; color: var(--text-primary);">📊 검색 결과 관련성</h3>
                        <iframe src="${safeBarPath}" style="width: 100%; height: 400px; border: 2px solid var(--border-color); border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"></iframe>
                    </div>
                `;
            }
            
            // 3D 시각화 표시
            if (htmlFilePath) {
                resultHTML += `
                    <div style="margin-top: 20px;">
                        <h3 style="font-size: 20px; margin-bottom: 15px; color: var(--text-primary);">🔍 3D 공간 시각화</h3>
                        <iframe src="${safeHtmlPath}" style="width: 100%; height: 700px; border: 2px solid var(--border-color); border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"></iframe>
                    </div>
                `;
            }
            
            resultHTML += `</div>`;
            
            aiSearchResults.innerHTML = resultHTML;
            
            // 결과 섹션으로 스크롤
            aiSearchResults.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
        
        // 검색 기록 상세 보기
        async function viewSearchHistory(id, htmlFilePath, barChartPath, query) {
            // 검색 결과 및 AI 답변 가져오기
            let searchResult = '';
            let aiAnswer = '';
            let rankingResult = null;
            let chromaPath = '';
            try {
                const response = await fetch('/api/search-history');
                const data = await response.json();
                if (data.success) {
                    const item = data.history.find(h => h.id === id);
                    if (item) {
                        console.log('Search history item:', item);
                        console.log('rankingResult:', item.rankingResult);
                        console.log('rankingResult type:', typeof item.rankingResult);
                        console.log('rankingResult is array?', Array.isArray(item.rankingResult));
                        searchResult = item.searchResult || '';
                        aiAnswer = item.aiAnswer || '';
                        
                        // rankingResult 파싱 (문자열이면 JSON 파싱)
                        if (typeof item.rankingResult === 'string') {
                            try {
                                rankingResult = JSON.parse(item.rankingResult);
                                console.log('rankingResult parsed from string');
                            } catch (e) {
                                console.error('Failed to parse rankingResult:', e);
                                rankingResult = null;
                            }
                        } else {
                            rankingResult = item.rankingResult || null;
                        }
                        
                        chromaPath = item.chromaPath || '';
                    }
                }
            } catch (error) {
                console.error('검색 결과 가져오기 실패:', error);
            }
            
            let resultHTML = `
                <div style="padding: 24px; background: var(--bg-primary); border-radius: 8px; margin-top: 15px;">
                    <h3 style="margin-bottom: 15px; color: var(--text-primary); font-size: 20px;">🔍 검색 내용</h3>
                    <div style="padding: 15px; background: var(--bg-secondary); border-radius: 6px; margin-bottom: 20px; font-size: 18px;">
                        ${query}
                    </div>
            `;
            
            // ChromaDB 경로 표시
            if (chromaPath) {
                resultHTML += `
                    <div style="margin-top: 10px; margin-bottom: 20px;">
                        <div style="font-size: 15px; color: var(--text-muted);">
                            💾 사용된 벡터 DB: ${chromaPath}
                        </div>
                    </div>
                `;
            }
            
            // ==========================================
            // 1. AI 답변
            // ==========================================
            if (aiAnswer) {
                resultHTML += `
                    <div style="margin-bottom: 20px;">
                        <h3 style="margin-bottom: 10px; color: var(--primary-color); font-size: 22px;">🤖 AI 답변</h3>
                        <div class="file-item" style="margin-bottom: 10px;">
                            <div style="padding: 16px; background: var(--bg-secondary); border-radius: 6px;">
                                <div style="white-space: pre-wrap; word-wrap: break-word; font-family: inherit; font-size: 16px; line-height: 1.8; color: var(--text-primary);">${aiAnswer}</div>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // ==========================================
            // 2. 검색 결과 순위 (ranking_result)
            // ==========================================
            console.log('=== rankingResult DEBUG ===');
            console.log('rankingResult:', rankingResult);
            console.log('rankingResult type:', typeof rankingResult);
            console.log('rankingResult is array?', Array.isArray(rankingResult));
            console.log('rankingResult length:', rankingResult ? rankingResult.length : 'null');
            
            if (rankingResult) {
                console.log('✅ rankingResult exists!', rankingResult);
                console.log('Is Array?', Array.isArray(rankingResult));
                console.log('First item keys:', rankingResult[0] ? Object.keys(rankingResult[0]) : 'no items');
            }
            
            if (rankingResult && Array.isArray(rankingResult) && rankingResult.length > 0) {
                console.log('✅ Displaying ranking results...');
                console.log('Total items:', rankingResult.length);
                resultHTML += `
                    <div style="margin-top: 20px;">
                        <h3 style="margin-bottom: 15px; color: var(--text-primary); font-size: 20px;">📊 검색 결과 순위</h3>
                        <div style="background: var(--bg-secondary); border-radius: 8px; overflow: hidden;">
                `;
                
                rankingResult.forEach((item, index) => {
                    console.log(`Item ${index}:`, item);
                    const medal = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '💫';
                    const keywords = item.keywords || '';
                    const fileLocation = item.file_location || '';
                    const content = item.content || item.summary || '';
                    const uniqueId = `content_${id}_${index}`;
                    const hasFullContent = content && content !== item.summary;
                    
                    // HTML 이스케이프 함수
                    const escapeHtml = (str) => {
                        if (!str) return '';
                        return String(str)
                            .replace(/&/g, '&amp;')
                            .replace(/</g, '&lt;')
                            .replace(/>/g, '&gt;')
                            .replace(/"/g, '&quot;')
                            .replace(/'/g, '&#039;');
                    };
                    
                    const safeKeywords = escapeHtml(keywords);
                    const safeFileLocation = escapeHtml(fileLocation);
                    const safeContent = escapeHtml(content);
                    const safeSummary = escapeHtml(item.summary || '');
                    const safeFileName = escapeHtml(item.file_name || '');
                    
                    resultHTML += `
                        <div style="padding: 18px; border-bottom: 1px solid var(--border-color); display: flex; align-items: flex-start; gap: 15px; transition: background-color 0.2s; border-radius: 6px; margin-bottom: 8px;" onmouseover="this.style.backgroundColor='rgba(102, 126, 234, 0.05)'" onmouseout="this.style.backgroundColor='transparent'">
                            <div style="font-size: 32px; flex-shrink: 0; padding-top: 4px;">${medal}</div>
                            <div style="flex: 1; min-width: 0;">
                                <div style="font-weight: 600; color: var(--primary-color); margin-bottom: 8px; font-size: 18px;">
                                    📄 ${safeFileName}
                                </div>
                                <div style="display: flex; gap: 15px; flex-wrap: wrap; margin-bottom: 8px;">
                                    ${safeFileLocation ? `<div style="font-size: 14px; color: var(--text-muted); padding: 6px 12px; background: rgba(102, 126, 234, 0.1); border-radius: 4px;">
                                        📁 ${safeFileLocation}
                                    </div>` : ''}
                                    <div style="font-size: 14px; color: white; padding: 6px 12px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 4px; font-weight: 600;">
                                        ⭐ ${item.relevance}%
                                    </div>
                                    ${safeKeywords ? `<div style="font-size: 14px; color: var(--primary-color); padding: 6px 12px; background: rgba(102, 126, 234, 0.1); border-radius: 4px;">
                                        🔑 ${safeKeywords}
                                    </div>` : ''}
                                </div>
                                ${safeSummary ? `<div style="font-size: 15px; color: var(--text-secondary); line-height: 1.8; white-space: normal; word-wrap: break-word; word-break: break-word; overflow-wrap: break-word; margin-bottom: 10px; padding: 12px; background: linear-gradient(135deg, #f8f9ff 0%, #e8ecfd 100%); border-radius: 6px; border-left: 4px solid var(--primary-color);">
                                    <div style="font-weight: 600; margin-bottom: 6px; color: var(--primary-color); font-size: 16px;">📋 요약:</div>
                                    <div style="color: var(--text-primary); font-size: 16px;">${safeSummary}</div>
                                </div>` : ''}
                            </div>
                        </div>
                    `;
                });
                
                resultHTML += `
                        </div>
                    </div>
                `;
            } else {
                // rankingResult가 없거나 배열이 아닌 경우
                console.log('❌ No ranking results to display');
                console.log('rankingResult value:', rankingResult);
                console.log('is null?', rankingResult === null);
                console.log('is undefined?', rankingResult === undefined);
                
                if (!rankingResult) {
                    resultHTML += `
                        <div style="margin-top: 20px; padding: 20px; background: var(--bg-secondary); border-radius: 8px; text-align: center;">
                            <p style="color: var(--text-muted); font-size: 16px;">📊 검색 결과 순위 정보가 없습니다.</p>
                        </div>
                    `;
                } else {
                    resultHTML += `
                        <div style="margin-top: 20px; padding: 20px; background: var(--bg-secondary); border-radius: 8px; text-align: center;">
                            <p style="color: var(--text-muted); font-size: 16px;">📊 검색 결과 순위: ${rankingResult.length}개 항목</p>
                        </div>
                    `;
                }
            }
            
            // 검색 결과 내용 표시 (AI 답변이 없는 경우만)
            if (searchResult && !aiAnswer && (!rankingResult || !Array.isArray(rankingResult) || rankingResult.length === 0)) {
                resultHTML += `
                    <div style="margin-top: 15px;">
                        <h3 style="margin-bottom: 10px; color: var(--text-primary); font-size: 20px;">📋 검색 결과</h3>
                        <div style="padding: 20px; background: var(--bg-secondary); border-radius: 6px; border-left: 3px solid var(--primary-color);">
                            <pre style="white-space: pre-wrap; word-wrap: break-word; font-family: inherit; margin: 0; font-size: 16px; line-height: 1.8;">${searchResult}</pre>
                        </div>
                    </div>
                `;
            }
            
            // ==========================================
            // 3. 검색 결과 관련성 (Bar Chart)
            // ==========================================
            if (barChartPath) {
                resultHTML += `
                    <div style="margin-top: 20px;">
                        <h3 style="font-size: 20px; margin-bottom: 15px; color: var(--text-primary);">📊 검색 결과 관련성</h3>
                        <iframe src="${barChartPath}" style="width: 100%; height: 400px; border: 2px solid var(--border-color); border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"></iframe>
                    </div>
                `;
            }
            
            // ==========================================
            // 4. 3D 공간 시각화
            // ==========================================
            if (htmlFilePath) {
                resultHTML += `
                    <div style="margin-top: 20px;">
                        <h3 style="font-size: 20px; margin-bottom: 15px; color: var(--text-primary);">🔍 3D 공간 시각화</h3>
                        <iframe src="${htmlFilePath}" style="width: 100%; height: 700px; border: 2px solid var(--border-color); border-radius: 6px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);"></iframe>
                    </div>
                `;
            }
            
            resultHTML += `</div>`;
            
            aiSearchResults.innerHTML = resultHTML;
            
            // 결과 섹션으로 스크롤
            aiSearchResults.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }

        // 전체 내용 토글 함수
        function toggleContent(contentId) {
            const contentDiv = document.getElementById(contentId);
            const btnSpan = document.getElementById('btn_' + contentId);
            
            if (contentDiv.style.display === 'none') {
                contentDiv.style.display = 'block';
                btnSpan.innerHTML = '📄 전체 내용 숨기기';
            } else {
                contentDiv.style.display = 'none';
                btnSpan.innerHTML = '📄 전체 내용 보기';
            }
        }

        // 진행 상황 모달 표시
        function showProgressModal(title = 'AI 검색') {
            const modal = document.getElementById('progressModal');
            const modalTitle = document.getElementById('modalTitle');
            modalTitle.textContent = title;
            modal.style.display = 'flex';
        }

        // 진행 상황 업데이트
        function updateProgress(percentage, status = '', isError = false) {
            const progressBar = document.getElementById('progressBar');
            const progressPercentage = document.getElementById('progressPercentage');
            const progressStatus = document.getElementById('progressStatus');
            
            // 0-100 사이로 제한
            percentage = Math.max(0, Math.min(100, percentage));
            
            progressBar.style.width = percentage + '%';
            progressPercentage.textContent = percentage + '%';
            
            // 오류 상태인 경우 빨간색으로 변경
            if (isError) {
                progressBar.style.background = 'linear-gradient(90deg, #dc3545 0%, #c82333 50%, #bd2130 100%)';
                progressBar.style.boxShadow = '0 4px 15px rgba(220, 53, 69, 0.5)';
            } else {
                progressBar.style.background = 'linear-gradient(90deg, #ffd700 0%, #ffed4e 50%, #ffff00 100%)';
                progressBar.style.boxShadow = '0 4px 15px rgba(255, 215, 0, 0.5)';
            }
            
            if (status) {
                progressStatus.textContent = status;
            }
        }

        // 진행 상황 모달 닫기
        function closeProgressModal() {
            const modal = document.getElementById('progressModal');
            modal.style.display = 'none';
            
            // 리셋 (색상도 리셋)
            const progressBar = document.getElementById('progressBar');
            progressBar.style.background = 'linear-gradient(90deg, #ffd700 0%, #ffed4e 50%, #ffff00 100%)';
            progressBar.style.boxShadow = '0 4px 15px rgba(255, 215, 0, 0.5)';
            
            // 제목 스타일 리셋
            const modalTitle = document.getElementById('modalTitle');
            modalTitle.style.color = 'white';
            
            updateProgress(0, '초기화 중...');
        }

        // 페이지 로드 시 파일 목록 및 검색 기록 표시
        loadAllFiles();
        loadSearchHistory();
    </script>
</body>
</html>


